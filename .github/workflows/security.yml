name: Security

on:
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read  # Required for private repos

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping"
          fi
          pip install safety pip-audit

      - name: Run Python safety check
        run: |
          safety check --json --output safety-report.json || echo "Safety check completed with warnings"

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || echo "Pip-audit completed with warnings"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        continue-on-error: true

      - name: Restore .NET dependencies
        run: |
          if [ -d "csharp_remediator" ]; then
            cd csharp_remediator
            dotnet restore || echo "Dotnet restore failed"
          else
            echo "csharp_remediator directory not found, skipping .NET steps"
          fi

      - name: Check .NET vulnerabilities
        run: |
          if [ -d "csharp_remediator" ]; then
            cd csharp_remediator
            dotnet list package --vulnerable --include-transitive --format json > ../dotnet-vulnerabilities.json || echo "No .NET vulnerabilities found"
          else
            echo "{}" > dotnet-vulnerabilities.json
          fi

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json
            dotnet-vulnerabilities.json
        if: always()

  secret-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./ 
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

  vulnerability-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true  # Add this to handle permission issues

      - name: Build and scan Docker images with Trivy
        run: |
          if [ -f "docker/Dockerfile.python" ]; then
            docker build -f docker/Dockerfile.python -t eribot-monitor:latest . || echo "Python Docker build failed"
            if docker images | grep -q eribot-monitor; then
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${{ github.workspace }}:/workspace aquasec/trivy:latest image --format sarif --output /workspace/trivy-docker-monitor.sarif eribot-monitor:latest || echo "Trivy scan failed"
            fi
          else
            echo "docker/Dockerfile.python not found, skipping"
          fi

          if [ -f "docker/Dockerfile.csharp" ]; then
            docker build -f docker/Dockerfile.csharp -t eribot-remediator:latest . || echo "C# Docker build failed"
            if docker images | grep -q eribot-remediator; then
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${{ github.workspace }}:/workspace aquasec/trivy:latest image --format sarif --output /workspace/trivy-docker-remediator.sarif eribot-remediator:latest || echo "Trivy scan failed"
            fi
          else
            echo "docker/Dockerfile.csharp not found, skipping"
          fi

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-monitor.sarif'
        continue-on-error: true

      - name: Upload Docker scan results (Remediator)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-remediator.sarif'
        continue-on-error: true

  code-security-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, csharp
          queries: security-and-quality

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        continue-on-error: true

      - name: Build .NET project
        run: |
          if [ -d "csharp_remediator" ]; then
            cd csharp_remediator
            dotnet build --configuration Release || echo "Build failed but continuing"
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python,csharp"
        continue-on-error: true  # Add this to handle permission issues

  bandit-security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit
        run: |
          if [ -d "python_monitor" ]; then
            bandit -r python_monitor/ -f json -o bandit-report.json || echo "Bandit scan completed with issues"
            bandit -r python_monitor/ -f txt -o bandit-report.txt || echo "Bandit scan completed with issues"
          else
            echo "python_monitor directory not found, creating empty reports"
            echo "{}" > bandit-report.json
            echo "No Python code found to scan" > bandit-report.txt
          fi

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: |
            bandit-report.json
            bandit-report.txt
        if: always()

  semgrep-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/csharp
          generateSarif: true
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()
        continue-on-error: true

  docker-security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          if [ -f "docker/Dockerfile.python" ]; then
            docker build -f docker/Dockerfile.python -t eribot-monitor:security-scan . || echo "Python build failed"
          fi
          if [ -f "docker/Dockerfile.csharp" ]; then
            docker build -f docker/Dockerfile.csharp -t eribot-remediator:security-scan . || echo "C# build failed"
          fi

      - name: Run Docker Scout
        run: |
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- || echo "Scout install failed"
          if docker images | grep -q eribot-monitor:security-scan; then
            docker scout cves eribot-monitor:security-scan --format sarif --output monitor-scout.sarif || echo "Monitor scout scan failed"
          fi
          if docker images | grep -q eribot-remediator:security-scan; then
            docker scout cves eribot-remediator:security-scan --format sarif --output remediator-scout.sarif || echo "Remediator scout scan failed"
          fi

      - name: Upload Scout results
        uses: actions/upload-artifact@v4
        with:
          name: docker-scout-results
          path: |
            monitor-scout.sarif
            remediator-scout.sarif
        if: always()
        continue-on-error: true

  configuration-security-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for hardcoded secrets in config
        run: |
          echo "🔍 Checking configuration files for secrets..."
          if [ -d "config" ]; then
            if grep -r -i "password\|token\|secret\|key" config/ --exclude="*.example" --exclude="README*" 2>/dev/null; then
              echo "⚠️ WARNING: Hardcoded secrets found!"
              exit 1
            fi
          else
            echo "No config directory found, skipping config check"
          fi

          echo "🐳 Checking Dockerfile security..."
          if [ -d "docker" ]; then
            if grep -q "USER root" docker/Dockerfile.* 2>/dev/null; then
              echo "⚠️ WARNING: Container running as root!"
            fi

            if ! grep -q "COPY --chown" docker/Dockerfile.* 2>/dev/null; then
              echo "💡 INFO: Consider using COPY --chown"
            fi
          else
            echo "No docker directory found, skipping Docker checks"
          fi

  security-report:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - dependency-scan
      - secret-scan
      - vulnerability-scan
      - code-security-analysis
      - bandit-security-scan
      - semgrep-scan
      - docker-security-scan
      - configuration-security-check
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md

          # Use needs context to check job results
          echo "✅ dependency-scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "✅ secret-scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "✅ vulnerability-scan: ${{ needs.vulnerability-scan.result }}" >> security-summary.md
          echo "✅ code-security-analysis: ${{ needs.code-security-analysis.result }}" >> security-summary.md
          echo "✅ bandit-security-scan: ${{ needs.bandit-security-scan.result }}" >> security-summary.md
          echo "✅ semgrep-scan: ${{ needs.semgrep-scan.result }}" >> security-summary.md
          echo "✅ docker-security-scan: ${{ needs.docker-security-scan.result }}" >> security-summary.md
          echo "✅ configuration-security-check: ${{ needs.configuration-security-check.result }}" >> security-summary.md

          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "- Review failed scans in the GitHub Security tab" >> security-summary.md
          echo "- Fix any critical issues before merging" >> security-summary.md
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md