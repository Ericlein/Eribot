name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  DOTNET_VERSION: '8.0.x'

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL: "#test-channel"
      CPU_THRESHOLD: "90"
      DISK_THRESHOLD: "90"
      MEMORY_THRESHOLD: "90"
      CHECK_INTERVAL: "60"
      REMEDIATOR_URL: "http://localhost:5001"
      LOG_LEVEL: "DEBUG"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Create test config
      run: |
        mkdir -p python_monitor/config
        cat > config/config.yaml << EOF
        monitoring:
          cpu_threshold: ${CPU_THRESHOLD}
          disk_threshold: ${DISK_THRESHOLD}
          memory_threshold: ${MEMORY_THRESHOLD}
          check_interval: ${CHECK_INTERVAL}
        
        slack:
          bot_token: "${SLACK_BOT_TOKEN}"
          channel: "${SLACK_CHANNEL}"
          username: "MonitorBot"
          icon_emoji: ":robot_face:"
        
        remediator:
          url: "${REMEDIATOR_URL}"
          timeout: 30
          retry_attempts: 2
        
        logging:
          level: "${LOG_LEVEL}"
          max_file_size: "10MB"
          backup_count: 5
        EOF
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 python_monitor --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 python_monitor --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type checking with mypy
      run: |
        pip install mypy types-requests types-PyYAML
        mypy python_monitor --ignore-missing-imports || true
    
    - name: Test with pytest (unit tests only)
      run: |
        cd python_monitor
        # Set CI environment variable to ensure integration tests are skipped
        export CI=true
        # Run only unit tests (explicitly exclude integration tests)
        PYTHONPATH=. pytest tests/ -v --cov=. --cov-report=xml --cov-report=html -k "not test_send_real" -m "unit"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: python_monitor/coverage.xml
        flags: python
        name: python-coverage

    - name: Send Slack notification on success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"✅ **EriBot Python Monitor build succeeded!**\n\n• **Branch:** $GITHUB_REF_NAME\n• **Commit:** ${GITHUB_SHA:0:7}\n• **Actor:** $GITHUB_ACTOR\n\nPython build and tests completed successfully!\n\nView details: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Send Slack notification on failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"❌ **EriBot Python Monitor build failed!**\n\n• **Branch:** $GITHUB_REF_NAME\n• **Commit:** ${GITHUB_SHA:0:7}\n• **Actor:** $GITHUB_ACTOR\n\nPython build or tests failed. Please check the logs.\n\nView details: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" \
        ${{ secrets.SLACK_WEBHOOK_URL }}

  test-csharp:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: |
        cd csharp_remediator
        dotnet restore
    
    - name: Build
      run: |
        cd csharp_remediator
        dotnet build --no-restore
    
    - name: Test
      run: |
        cd csharp_remediator
        dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: csharp_remediator/tests/coverage.opencover.xml
        flags: csharp
        name: csharp-coverage

    - name: Send Slack notification on C# build success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"✅ **EriBot C# Remediator build succeeded!**\n\n• **Branch:** $GITHUB_REF_NAME\n• **Commit:** ${GITHUB_SHA:0:7}\n• **Actor:** $GITHUB_ACTOR\n\nC# build and tests completed successfully!\n\nView details: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Send Slack notification on C# build failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"❌ **EriBot C# Remediator build failed!**\n\n• **Branch:** $GITHUB_REF_NAME\n• **Commit:** ${GITHUB_SHA:0:7}\n• **Actor:** $GITHUB_ACTOR\n\nC# build or tests failed. Please check the logs.\n\nView details: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" \
        ${{ secrets.SLACK_WEBHOOK_URL }}