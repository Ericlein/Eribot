name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL: "#test-channel"
      CPU_THRESHOLD: "90"
      DISK_THRESHOLD: "90"
      MEMORY_THRESHOLD: "90"
      CHECK_INTERVAL: "60"
      REMEDIATOR_URL: "http://localhost:5001"
      LOG_LEVEL: "DEBUG"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Create test config
      run: |
        mkdir -p python_monitor/config
        cat > config/config.yaml << EOF
        monitoring:
          cpu_threshold: ${CPU_THRESHOLD}
          disk_threshold: ${DISK_THRESHOLD}
          memory_threshold: ${MEMORY_THRESHOLD}
          check_interval: ${CHECK_INTERVAL}
        
        slack:
          bot_token: "${SLACK_BOT_TOKEN}"
          channel: "${SLACK_CHANNEL}"
          username: "MonitorBot"
          icon_emoji: ":robot_face:"
        
        remediator:
          url: "${REMEDIATOR_URL}"
          timeout: 30
          retry_attempts: 2
        
        logging:
          level: "${LOG_LEVEL}"
          max_file_size: "10MB"
          backup_count: 5
        EOF
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 python_monitor --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 python_monitor --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Test with pytest (unit tests only)
      run: |
        cd python_monitor
        export CI=true
        PYTHONPATH=. pytest tests/ -v --cov=. --cov-report=xml --cov-report=html -k "not test_send_real" -m "unit"

  # Same as your CI tests - just copied
  test-csharp:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: |
        cd csharp_remediator
        dotnet restore
    
    - name: Build
      run: |
        cd csharp_remediator
        dotnet build --no-restore
    
    - name: Test
      run: |
        cd csharp_remediator
        dotnet test --no-build --verbosity normal

  # Simple Docker build - no complex metadata
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-python, test-csharp]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: |
        # Simple version extraction
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION_NUMBER=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Monitor image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.python
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository }}/monitor:${{ steps.version.outputs.version_number }}
          ${{ env.REGISTRY }}/${{ github.repository }}/monitor:latest
        platforms: linux/amd64,linux/arm64

    - name: Build and push Remediator image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.csharp
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository }}/remediator:${{ steps.version.outputs.version_number }}
          ${{ env.REGISTRY }}/${{ github.repository }}/remediator:latest
        platforms: linux/amd64,linux/arm64

  # Simple binary builds
  build-binaries:
    runs-on: ubuntu-latest
    needs: [test-python, test-csharp]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION_NUMBER=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build .NET applications
      run: |
        cd csharp_remediator
        VERSION="${{ steps.version.outputs.version_number }}"
        
        # Build for different platforms
        dotnet publish -c Release -r win-x64 --self-contained -o ../dist/win-x64
        dotnet publish -c Release -r linux-x64 --self-contained -o ../dist/linux-x64
        dotnet publish -c Release -r osx-x64 --self-contained -o ../dist/osx-x64

    - name: Create release packages
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        mkdir -p packages
        
        # Windows package
        zip -r packages/eribot-windows-x64-${VERSION}.zip \
          dist/win-x64/ \
          python_monitor/ \
          config/ \
          requirements.txt \
          README.md \
          QUICK_START.md \
          scripts/install.ps1
        
        # Linux package
        tar -czf packages/eribot-linux-x64-${VERSION}.tar.gz \
          dist/linux-x64/ \
          python_monitor/ \
          config/ \
          requirements.txt \
          README.md \
          QUICK_START.md \
          scripts/install.sh
        
        # macOS package
        tar -czf packages/eribot-macos-x64-${VERSION}.tar.gz \
          dist/osx-x64/ \
          python_monitor/ \
          config/ \
          requirements.txt \
          README.md \
          QUICK_START.md

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: packages/

  # Simple GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [build-docker, build-binaries]
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "EriBot ${{ steps.version.outputs.version }}"
        body: |
          ## EriBot ${{ steps.version.outputs.version }}
          
          ðŸŽ‰ New release of EriBot!
          
          ### ðŸš€ Quick Install
          
          **Docker:**
          ```bash
          docker run -d --name eribot-monitor \
            -e SLACK_BOT_TOKEN=xoxb-your-token \
            ghcr.io/${{ github.repository }}/monitor:${{ steps.version.outputs.version }}
          ```
          
          **Linux:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/eribot-linux-x64-${{ steps.version.outputs.version }}.tar.gz
          tar -xzf eribot-linux-x64-${{ steps.version.outputs.version }}.tar.gz
          ```
          
          ### ðŸ“¦ What's included
          - Multi-platform binaries
          - Docker images (AMD64 + ARM64)
          - Installation scripts
          - Complete documentation
        files: packages/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}